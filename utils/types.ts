// src/utils/types.ts

// --- Core User & Auth Types ---
export type CreateUserServiceParams = {
    name: string;
    email: string;
    phone: string;
    password: string;
}

export type LoginUserServiceParams = {
    email: string;
    password: string;
}

// --- Teacher Types ---
export type CreateTeacherServiceParams = {
    name: string;
    email: string;
    password: string;
    expertise: string;
    phone: string;
}

export type LoginTeacherServiceParams = {
    email: string;
    password: string;
}

export type GetTeacherFilterType = {
    name?: string;
    email?: string;
    expertise?: string;
    phone?: string;
    id?: string;
}

export type CourseTeacherServiceOperationType = 'assign' | 'unassign';

// --- Admin Types ---
export type CreateAdminServiceParams = {
    name: string;
    email: string;
    password: string;
}

export type LoginAdminServiceParams = {
    email: string;
    password: string;
}

// --- Category Types ---
export type CreateCategoriesServiceParams = {
    name: string;
    description?: string;
    imageUrl?: string;
}

export type GetCategorySearchCriteria = {
    name?: string;
    id?: string;
}

// --- Course Content & Syllabus Types ---

/**
 * @interface SyllabusSection
 * @description Defines the structure for a section within a course's syllabus.
 */
export type SyllabusSection = {
    title: string;
    content: string; // Could be a detailed description or sub-topics
    // You can add more fields here if your frontend needs them, e.g., 'order', 'duration'
};

/**
 * @interface CourseContentItem
 * @description Defines the structure for an individual lesson/content item within a course's `contents` array.
 * This should match the structure defined in your `Course.model.ts`.
 */
export interface CourseContentItem {
    id: string; // Unique ID for the content item (generated by UUID in backend)
    title: string; // Title of the lesson/video
    video_url: string; // URL to the video content
    description?: string | null; // Optional description for the content
    order: number; // The display order of this content item within the course
    type: string; // Type of content, e.g., 'video', 'quiz', 'text', 'assignment'
    created_at: string; // ISO date string when the content item was added
}

/**
 * @interface AddCourseContentParams
 * @description Parameters required to add a new content item to a course.
 */
export interface AddCourseContentParams {
    title: string;
    video_url: string;
    description?: string;
    order?: number; // Optional: If not provided, it will typically be added at the end
    type?: string; // Optional: Defaults to 'video' if not provided
}

/**
 * @interface UpdateCourseContentParams
 * @description Parameters that can be used to update an existing content item.
 * All fields are optional as it represents a partial update.
 */
export interface UpdateCourseContentParams {
    title?: string;
    video_url?: string;
    description?: string;
    order?: number;
    type?: string;
}

// --- Course Management Types ---

export type CreateCourseServiceParams = {
    name: string;
    description?: string;
    imageUrl?: string;
    categoryId: string;
    price?: number;
    demoVideoUrl?: string;
    courseType: string; // This will map to 'live' | 'recorded'
    active?: boolean;
    syllabus?: SyllabusSection[]; // Optional array of syllabus sections
    contents?: CourseContentItem[]; // Optional for initial course creation
}

export type UpdateCourseServiceParams = {
    name?: string;
    description?: string;
    imageUrl?: string;
    categoryId?: string;
    price?: number;
    courseType?: string; // This will map to 'live' | 'recorded'
    demoVideoUrl?: string;
    active?: boolean;
    syllabus?: SyllabusSection[]; // Optional array of syllabus sections
    contents?: CourseContentItem[]; // Optional: To update the entire contents array if needed (less common for individual item updates)
}

export type GetAllCourseServiceParams = {
    categoryId?: string;
    id?: string;
    active?: boolean;
    teacherId?: string;
}

export type GetCourseFilters = {
    limit?: number;
    offset?: number;
}

// --- Test Series & Question Types ---
export interface CreateTestSeriesServiceParams {
    name: string;
    description?: string;
    createdBy: string;
}

export interface UpdateTestSeriesServiceParams {
    name?: string;
    description?: string;
}
export interface CreateQuestionServiceParams {
    testId: string;
    questionText: string;
}
export interface UpdateQuestionServiceParams {
    questionText?: string;
}

export interface CreateOptionServiceParams {
    questionId: string;
    text: string;
    isCorrect: boolean;
}

export interface UpdateOptionServiceParams {
    text?: string;
    isCorrect?: boolean;
}
